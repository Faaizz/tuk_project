MODULE main


--=====================================================================
--DECLARATION
--=====================================================================
VAR

-- INPUTS
S_AL1_1: boolean;
-- Item weight (conveyor scale)
CS_AL1_W: 0..8;
S_AL1_B: boolean;
S_AL1_B1: boolean;
S_AL1_B2: boolean;
S_AL1_B3: boolean;
S_AL1_L: boolean;
S_AL1_L1: boolean;
S_AL1_L2: boolean;
S_AL1_L3: boolean;
P_AL1_L_FT: boolean;
P_AL1_B_FT: boolean;
RP_AL1_CLAMPED: boolean;
LP_AL1_CLAMPED: boolean;

-- Assembly
-- Grabber at X & Y set point (AL1_X_POS=8.0 & AL1_Y_POS=1.5)
AL1_X_Y_LID_POS: boolean;
-- Grabber lowered (AL1_Z_POS=8.5)
AL1_Z_POS_DW: boolean;
-- Grabber raised (AL1_Z_POS=4.0)
AL1_Z_POS_UP: boolean;
-- Grabber at X & Y set point (AL1_X_SET=2.0) (AL1_Y_SET=1.5)
AL1_X_Y_BASE_POS: boolean;
LP_AL1_LIMIT: boolean;


-- TIMERS
-- 1.5 secs has elapsed
timer_1_5: boolean;
-- 1 sec has elapsed
timer_1: boolean;
-- 0.5 sec has elapsed
timer_0_5: boolean;

-- PLACES
-- Initial place. Item recieved from production line.
P0: boolean;
-- Item at conveyor scale.
P1: boolean;
-- Conveyor scale busy.
P2: boolean;
-- Invalid item, pass to bin
P3: boolean;

-- Bin
BIN1: boolean;
BIN2: boolean;

-- Lid
P4: boolean;
P6: boolean;
P8: boolean;
-- Push Lid onto assembly line
P10: boolean;
-- Restore Lid pusher
P12: boolean;
-- Lid buffer 1 
P14: boolean;
-- Lid buffer 2
P16: boolean;
-- Lid buffer 3
P18: boolean;
P20: boolean;
-- Lid clamp
P22: boolean;

-- Lid line free
RP: boolean;

-- Base
P5: boolean;
P7: boolean;
P9: boolean;
-- Push base onto assembly line
P11: boolean;
-- Restore base pusher
P13: boolean;
-- Base buffer 1 
P15: boolean;
-- Base buffer 2
P17: boolean;
-- Base buffer 3
P19: boolean;
P21: boolean;
-- Base clamp
P23: boolean;

-- Base line free
LP: boolean;

-- Assembly
-- Lid and base clamped. Change grabber set point to Lid position (AL1_X_SET=8.0) (AL1_Y_SET=1.5)
PA1: boolean;
-- Move grabber down to lift up lid. Set grabber Z position (AL1_Z_SET= 8.0)
PA2: boolean;
-- Grab lid and release lid clamp
PA3: boolean;
-- Lift lid, change grabber Z set point to (AL1_Z_SET=4.0)
PA4: boolean;
-- Move grabber to base position. Change set point to (AL1_X_SET=2.0) (AL1_Y_SET=1.5)
PA5: boolean;
-- Lower grabber to fit lid on base
PA6: boolean;
-- Release grab in lid and raise grabber  (AL1_Z_POS=4.0)
PA7: boolean;
-- Release base clamp
PA8: boolean;
-- Raise base clamp
PA9: boolean;
-- Intermittent place to ensure base clamp is raised sucessfully
PA9P: boolean;
-- Lower base clamp
PA10: boolean;
-- Intermittent place to ensure base clamp is lowered sucessfully
PA11: boolean;


-- INTERNAL VARIABLE
AL1_TYPE: {0,1,2};

--=====================================================================
--DEFINITION
--=====================================================================
DEFINE

-- TRANSITIONS
T01:= (P0) & ( S_AL1_1 & (CS_AL1_W <= 1) ) & (!P1);
T02:= (P0) & ( S_AL1_1 & (CS_AL1_W > 1) ) & (!P2);
T21:= (P2) & ( S_AL1_1 & (CS_AL1_W <= 1) ) & (!P1);
T13:= (P1) & ( (CS_AL1_W < 5) | (CS_AL1_W > 8) ) & (!P3);
T14:= (P1) & ( (CS_AL1_W >= 5) & (CS_AL1_W <= 6) ) & (!P4);
T15:= (P1) & ( (CS_AL1_W >= 7) & (CS_AL1_W <= 8) ) & (!P5);
stab_a:= !(T01 | T02 | T21 | T13 | T14 | T15);

-- Bin
TB1:= (P3 & BIN1) & (!BIN2);
TB2:= (BIN2) & (!BIN1);

-- Lid path
T46:= (P4) & ( timer_1_5 ) & (!P6);
T68:= (P6) & ( (AL1_TYPE=1) & S_AL1_L ) & (!P8);
T810:= (P8) & ( timer_1 ) & (!P10);
T1012:= (P10) & ( P_AL1_L_FT ) & (!P12);
T1214:= (P12) & (  S_AL1_L1 ) & (!P14);
T1416:= (P14) & ( !S_AL1_L2 ) & (!P16);
T1618:= (P16) & ( !S_AL1_L3 ) & (!P18);
T1820:= (P18 & RP) & ( !RP_AL1_CLAMPED ) & (!P20);
T2022:= (P20) & ( timer_1 ) & (!P22);
stab_b:= !(T46 | T68 | T810 | T1012 | T1214 | T1416 | T1618 | T1820 | T2022);


-- Base path
T57:= (P5) & ( timer_1_5 ) & (!P7);
T79:= (P7) & ( (AL1_TYPE=2) & S_AL1_B ) & (!P9);
T911:= (P9) & ( timer_1 ) & (!P11);
T1113:= (P11) & ( P_AL1_B_FT ) & (!P13);
T1315:= (P13) & (  S_AL1_B1 ) & (!P15);
T1517:= (P15) & ( !S_AL1_B2 ) & (!P17);
T1719:= (P17) & ( !S_AL1_B3 ) & (!P19);
T1921:= (P19 & LP) & ( !LP_AL1_CLAMPED ) & (!P21);
T2123:= (P21) & ( timer_1 ) & (!P23);
stab_c:= !(T57 | T79 | T911 | T1113 | T1315 | T1517 | T1719 | T1921 | T2123);

-- Assembly
TA1:= (P22 & P23) & (!PA1);
TA2:= (PA1) & (AL1_X_Y_LID_POS) & (!PA2); 
TA3:= (PA2) & (AL1_Z_POS_DW) & (!PA3);
TA4:= (PA3) & (!RP_AL1_CLAMPED) & (!PA4 & !RP);
TA5:= (PA4) & (AL1_Z_POS_UP) & (!PA5);
TA6:= (PA5) & (AL1_X_Y_BASE_POS) & (!PA6);
TA7:= (PA6) & (AL1_Z_POS_DW) & (!PA7);
TA8:= (PA7) & (AL1_Z_POS_UP) & (!PA8);
TA9:= (PA8) & (timer_0_5) & (!PA9);
TA10:= (PA9) & (!LP_AL1_LIMIT) & (!PA9P);
TA10P:= (PA9P) & (LP_AL1_LIMIT) & (!PA10);
TA11:= (PA10) & (!LP_AL1_LIMIT) & (!PA11);
TA12:= (PA11) & (LP_AL1_LIMIT) & (!LP);
stab_d:= !(TA1 | TA2 | TA3 | TA4 | TA5 | TA6 | TA7 | TA8 | TA9 | TA10 | TA10P | TA11 | TA12);

-- STABLE
stab:= stab_a & stab_b & stab_c & stab_d;


-- OUTPUTS
-----------------------------------------------------------------------
-- ALWAYS ON
-----------------------------------------------------------------------
-- All conveyors

-- Pop Up Wheel Sorter Forward
PUWS_AL1_PLUS:= TRUE;
-----------------------------------------------------------------------
-- Block incoming item from production line
set_SB_AL1:= P2;
reset_SB_AL1:= P1;
SB_AL1:= set_SB_AL1 & !reset_SB_AL1;
-- Divert item towards assembly line
set_PUWS_AL1_RT:= P4 | P5;
reset_PUWS_AL1_RT:= P6 | P7;
PUWS_AL1_RT:= set_PUWS_AL1_RT & !reset_PUWS_AL1_RT;
-- Lid pusher
set_P_AL1_L:= P10;
reset_P_AL1_L:= P12;
P_AL1_L:= set_P_AL1_L & !reset_P_AL1_L;
-- Lid buffer 1
set_SB_AL1_L1:= P14;
reset_SB_AL1_L1:= !set_SB_AL1_L1;
SB_AL1_L1:= set_SB_AL1_L1 & !reset_SB_AL1_L1;
-- Lid buffer 2
set_SB_AL1_L2:= P16;
reset_SB_AL1_L2:= !set_SB_AL1_L2;
SB_AL1_L2:= set_SB_AL1_L2 & !reset_SB_AL1_L2;
-- Lid buffer 3
set_SB_AL1_L3:= P18;
reset_SB_AL1_L3:= !set_SB_AL1_L3;
SB_AL1_L3:= set_SB_AL1_L3 & !reset_SB_AL1_L3;
-- Lid clamp
set_RP_AL1_CLAMP:= P22;
reset_RP_AL1_CLAMP:= PA3;
RP_AL1_CLAMP:= set_RP_AL1_CLAMP & !reset_RP_AL1_CLAMP;

-- Base pusher
set_P_AL1_B:= P11;
reset_P_AL1_B:= P13;
P_AL1_B:= set_P_AL1_B & !reset_P_AL1_B;
-- Base buffer 1
set_SB_AL1_B1:= P15;
reset_SB_AL1_B1:= !set_SB_AL1_B1;
SB_AL1_B1:= set_SB_AL1_B1 & !reset_SB_AL1_B1;
-- Base buffer 2
set_SB_AL1_B2:= P17;
reset_SB_AL1_B2:= !set_SB_AL1_B2;
SB_AL1_B2:= set_SB_AL1_B2 & !reset_SB_AL1_B2;
-- Base buffer 3
set_SB_AL1_B3:= P19;
reset_SB_AL1_B3:= !set_SB_AL1_B3;
SB_AL1_B3:= set_SB_AL1_B3 & !reset_SB_AL1_B3;
-- Base clamp
set_LP_AL1_CLAMP:= P23;
reset_LP_AL1_CLAMP:= PA8;
LP_AL1_CLAMP:= set_LP_AL1_CLAMP & !reset_LP_AL1_CLAMP;

-- Assembly
-- Grabber
set_AL1_GRAB:= PA3;
reset_AL1_GRAB:= PA7;
AL1_GRAB:= set_AL1_GRAB & !reset_AL1_GRAB;
-- Raise base clamp
set_LP_AL1_RAISE:= PA9;
reset_LP_AL1_RAISE:= PA10;
LP_AL1_RAISE:= set_LP_AL1_RAISE & ! reset_LP_AL1_RAISE;

--=====================================================================
--ASSIGNMENT
--=====================================================================
ASSIGN

-- INPUTS
init(S_AL1_1):= {TRUE, FALSE};
next(S_AL1_1):= case
    stab: {TRUE, FALSE};
    TRUE: S_AL1_1;
esac;
init(S_AL1_B):= {TRUE, FALSE};
next(S_AL1_B):= case
    stab: {TRUE, FALSE};
    TRUE: S_AL1_B;
esac;
init(S_AL1_B1):= {TRUE, FALSE};
next(S_AL1_B1):= case
    stab: {TRUE, FALSE};
    TRUE: S_AL1_B1;
esac;
init(S_AL1_B2):= {TRUE, FALSE};
next(S_AL1_B2):= case
    stab: {TRUE, FALSE};
    TRUE: S_AL1_B2;
esac;
init(S_AL1_B3):= {TRUE, FALSE};
next(S_AL1_B3):= case
    stab: {TRUE, FALSE};
    TRUE: S_AL1_B3;
esac;
init(S_AL1_L):= {TRUE, FALSE};
next(S_AL1_L):= case
    stab: {TRUE, FALSE};
    TRUE: S_AL1_L;
esac;
init(S_AL1_L1):= {TRUE, FALSE};
next(S_AL1_L1):= case
    stab: {TRUE, FALSE};
    TRUE: S_AL1_L1;
esac;
init(S_AL1_L2):= {TRUE, FALSE};
next(S_AL1_L2):= case
    stab: {TRUE, FALSE};
    TRUE: S_AL1_L2;
esac;
init(S_AL1_L3):= {TRUE, FALSE};
next(S_AL1_L3):= case
    stab: {TRUE, FALSE};
    TRUE: S_AL1_L3;
esac;
init(P_AL1_L_FT):= {TRUE, FALSE};
next(P_AL1_L_FT):= case
    stab: {TRUE, FALSE};
    TRUE: P_AL1_L_FT;
esac;
init(P_AL1_B_FT):= {TRUE, FALSE};
next(P_AL1_B_FT):= case
    stab: {TRUE, FALSE};
    TRUE: P_AL1_B_FT;
esac;
init(RP_AL1_CLAMPED):= {TRUE, FALSE};
next(RP_AL1_CLAMPED):= case
    stab: {TRUE, FALSE};
    TRUE: RP_AL1_CLAMPED;
esac;
init(LP_AL1_CLAMPED):= {TRUE, FALSE};
next(LP_AL1_CLAMPED):= case
    stab: {TRUE, FALSE};
    TRUE: LP_AL1_CLAMPED;
esac;

init(CS_AL1_W):= 0;
next(CS_AL1_W):= case
    stab: {0,5,7,8};
    TRUE: CS_AL1_W;
esac;

-- Assembly
init(AL1_X_Y_LID_POS):= {TRUE, FALSE};
next(AL1_X_Y_LID_POS):= case
    stab: {TRUE, FALSE};
    TRUE: AL1_X_Y_LID_POS;
esac;
init(AL1_Z_POS_DW):= {TRUE, FALSE};
next(AL1_Z_POS_DW):= case
    stab: {TRUE, FALSE};
    TRUE: AL1_Z_POS_DW;
esac;
init(AL1_Z_POS_UP):= {TRUE, FALSE};
next(AL1_Z_POS_UP):= case
    stab: {TRUE, FALSE};
    TRUE: AL1_Z_POS_UP;
esac;
init(AL1_X_Y_BASE_POS):= {TRUE, FALSE};
next(AL1_X_Y_BASE_POS):= case
    stab: {TRUE, FALSE};
    TRUE: AL1_X_Y_BASE_POS;
esac;
init(LP_AL1_LIMIT):= {TRUE, FALSE};
next(LP_AL1_LIMIT):= case
    stab: {TRUE, FALSE};
    TRUE: LP_AL1_LIMIT;
esac;


-- TIMERS
init(timer_1_5):= {TRUE, FALSE};
next(timer_1_5):= case
    stab: {TRUE, FALSE};
    TRUE: timer_1_5;
esac;
init(timer_1):= {TRUE, FALSE};
next(timer_1):= case
    stab: {TRUE, FALSE};
    TRUE: timer_1;
esac;
init(timer_0_5):= {TRUE, FALSE};
next(timer_0_5):= case
    stab: {TRUE, FALSE};
    TRUE: timer_0_5;
esac;


-- INTERNAL VARIABLE
init(AL1_TYPE):= 0;
next(AL1_TYPE):= case
    -- Lid detected
    P4: 1;
    -- Base detected
    P5: 2;
    TRUE: AL1_TYPE;
esac;


-- INITIAL PLACES
init(P0):= TRUE;
next(P0):= case
    T01: FALSE;
    T02: FALSE;
    T14: TRUE;
    T15: TRUE;
    TRUE: P0;
esac;

init(RP):= TRUE;
next(RP):= case
    T1820: FALSE;
    TA4: TRUE;
    TRUE: RP;
esac;

init(LP):= TRUE;
next(LP):= case
    T1921: FALSE;
    TA12: TRUE;
    TRUE: LP;
esac;

init(BIN1):= TRUE;
next(BIN1):= case
    TB1: FALSE;
    TB2: TRUE;
    TRUE: BIN1;
esac;


-- PLACES
-- Bin
init(BIN2):= FALSE;
next(BIN2):= case
    TB1: TRUE;
    TB2: FALSE;
    TRUE: BIN2;
esac;

init(P1):= FALSE;
next(P1):= case
    T01: TRUE;
    T21: TRUE;
    T13: FALSE;
    T14: FALSE;
    T15: FALSE;
    TRUE: P1;
esac;

init(P2):= FALSE;
next(P2):= case
    T02: TRUE;
    T21: FALSE;
    TRUE: P2;
esac;

init(P3):= FALSE;
next(P3):= case
    T13: TRUE;
    TB1: FALSE;
    TRUE: P3;
esac;


-- Lid
init(P4):= FALSE;
next(P4):= case
    T14: TRUE;
    T46: FALSE;
    TRUE: P4;
esac;

init(P6):= FALSE;
next(P6):= case
    T46: TRUE;
    T68: FALSE;
    TRUE: P6;
esac;

init(P8):= FALSE;
next(P8):= case
    T68: TRUE;
    T810: FALSE;
    TRUE: P8;
esac;

init(P10):= FALSE;
next(P10):= case
    T810: TRUE;
    T1012: FALSE;
    TRUE: P10;
esac;

init(P12):= FALSE;
next(P12):= case
    T1012: TRUE;
    T1214: FALSE;
    TRUE: P12;
esac;

init(P14):= FALSE;
next(P14):= case
    T1214: TRUE;
    T1416: FALSE;
    TRUE: P14;
esac;
init(P16):= FALSE;
next(P16):= case
    T1416: TRUE;
    T1618: FALSE;
    TRUE: P16;
esac;
init(P18):= FALSE;
next(P18):= case
    T1618: TRUE;
    T1820: FALSE;
    TRUE: P18;
esac;
init(P20):= FALSE;
next(P20):= case
    T1820: TRUE;
    T2022: FALSE;
    TRUE: P20;
esac;
init(P22):= FALSE;
next(P22):= case
    T2022: TRUE;
    TA1: FALSE;
    TRUE: P22;
esac;


-- Base
init(P5):= FALSE;
next(P5):= case
    T15: TRUE;
    T57: FALSE;
    TRUE: P5;
esac;

init(P7):= FALSE;
next(P7):= case
    T57: TRUE;
    T79: FALSE;
    TRUE: P7;
esac;

init(P9):= FALSE;
next(P9):= case
    T79: TRUE;
    T911: FALSE;
    TRUE: P9;
esac;

init(P11):= FALSE;
next(P11):= case
    T911: TRUE;
    T1113: FALSE;
    TRUE: P11;
esac;

init(P13):= FALSE;
next(P13):= case
    T1113: TRUE;
    T1315: FALSE;
    TRUE: P13;
esac;

init(P15):= FALSE;
next(P15):= case
    T1315: TRUE;
    T1517: FALSE;
    TRUE: P15;
esac;
init(P17):= FALSE;
next(P17):= case
    T1517: TRUE;
    T1719: FALSE;
    TRUE: P17;
esac;
init(P19):= FALSE;
next(P19):= case
    T1719: TRUE;
    T1921: FALSE;
    TRUE: P19;
esac;
init(P21):= FALSE;
next(P21):= case
    T1921: TRUE;
    T2123: FALSE;
    TRUE: P21;
esac;
init(P23):= FALSE;
next(P23):= case
    T2123: TRUE;
    TA1: FALSE;
    TRUE: P23;
esac;


-- Assembly
init(PA1):= FALSE;
next(PA1):= case
    TA1: TRUE;
    TA2: FALSE;
    TRUE: PA1;
esac;
init(PA2):= FALSE;
next(PA2):= case
    TA2: TRUE;
    TA3: FALSE;
    TRUE: PA2;
esac;
init(PA3):= FALSE;
next(PA3):= case
    TA3: TRUE;
    TA4: FALSE;
    TRUE: PA3;
esac;
init(PA4):= FALSE;
next(PA4):= case
    TA4: TRUE;
    TA5: FALSE;
    TRUE: PA4;
esac;
init(PA5):= FALSE;
next(PA5):= case
    TA5: TRUE;
    TA6: FALSE;
    TRUE: PA5;
esac;
init(PA6):= FALSE;
next(PA6):= case
    TA6: TRUE;
    TA7: FALSE;
    TRUE: PA6;
esac;
init(PA7):= FALSE;
next(PA7):= case
    TA7: TRUE;
    TA8: FALSE;
    TRUE: PA7;
esac;
init(PA8):= FALSE;
next(PA8):= case
    TA8: TRUE;
    TA9: FALSE;
    TRUE: PA8;
esac;
init(PA9):= FALSE;
next(PA9):= case
    TA9: TRUE;
    TA10: FALSE;
    TRUE: PA9;
esac;
init(PA9P):= FALSE;
next(PA9P):= case
    TA10: TRUE;
    TA10P: FALSE;
    TRUE: PA9P;
esac;
init(PA10):= FALSE;
next(PA10):= case
    TA10P: TRUE;
    TA11: FALSE;
    TRUE: PA10;
esac;
init(PA11):= FALSE;
next(PA11):= case
    TA11: TRUE;
    TA12: FALSE;
    TRUE: PA11;
esac;




--=====================================================================
--SPECIFICATIONS
--=====================================================================
-- Product assembled
SPEC
AG( stab -> EF(PA11) );