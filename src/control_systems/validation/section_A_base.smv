
MODULE main

--=====================================================================
--DECLARATION
--=====================================================================

VAR


-- INPUTS
START: boolean;
STOP: boolean;
SB1: boolean;
SB4: boolean;
SB5: boolean;
SB6: boolean;
SB9: boolean;
SBR2: boolean;
SBR3: boolean;
SBR4: boolean;
SBR5: boolean;
SB7B0: boolean;
SB7B1: boolean;
SB7B2: boolean;
SB7B3: boolean;
SB8B0: boolean;
SB8B1: boolean;
SB8B2: boolean;
SB8B3: boolean;
SP: {"0", "1", "2"};
MCB_error: boolean;
MCBR_error: boolean;
CSB1W: boolean;
SL1: boolean;
MCL_error: boolean;
MCLR_error: boolean;
TB2RX_time: boolean;
TLBR2_time: boolean;
 
-- PLACES
IDLE: boolean;
PB0: boolean;
PB1: boolean;
PBLR1: boolean;
PB2: boolean;
PB3: boolean;
PB4: boolean;
PB5: boolean;
PB6: boolean;
PBR1X: boolean;
PBR1: boolean;
PBR2: boolean;
PBR3: boolean;
PBR4: boolean;
PB7: boolean;
PB8: boolean;
PB9: boolean;
PB10: boolean;
PL0: boolean;
PL1: boolean;
PLBR1: boolean;
PLBR2: boolean;


--=====================================================================
--DEFINITION
--=====================================================================

DEFINE


-- TRANSITIONS
RUN:= (IDLE) & ( (START) ) & (!PB0);
HALT:= (PB10) & ( (STOP) ) & (!IDLE);
TB01:= (PB0) & ( (SB1) ) & (!PB1);
TBLR:= (PB1) & ( (MCB_error & MCBR_error) ) & (!PBLR1);
TB12:= (PB1) & ( (!MCB_error & !MCBR_error) ) & (!PB2);
TB23:= (PB2) & ( (!MCB_error) ) & (!PB3);
TB2R:= (PB2) & ( (MCB_error & !MCBR_error) ) & (!PBR1X);
TB30:= (PB3) & ( (!SB4 & !SB5) ) & (!PB0);
TB34:= (PB3) & ( (SB5 & !SB4) ) & (!PB4);
TB45:= (PB4) & ( (SB4) ) & (!PB5);
TB56:= (PB5) & ( (!SB6) ) & (!PB6);
TB2RX:= (PBR1X) & ( (TB2RX_time) ) & (!PBR1);
TBR10:= (PBR1) & ( (!SBR2 & !SBR3) ) & (!PBR3);
TBR12:= (PBR1) & ( (SBR3 & !SBR2) ) & (!PBR2);
TBR23:= (PBR2) & ( (SBR2) ) & (!PBR3);
TBR34:= (PBR3) & ( (!SBR4) ) & (!PBR4);
TB10R4:= (PBR4) & ( (SB9) ) & (!PB10);
CAM7_DET:= (TRUE) & ( (SB7B0 & SB7B1 & SB7B2 & SB7B3) ) & (!FALSE);
CAM8_DET:= (TRUE) & ( (SB8B0 & SB8B1 & SB8B2 & SB8B3) ) & (!FALSE);
TB67:= (PB6) & ( (SBR5 & CAM8_DET & !CAM7_DET) ) & (!PB7);
TB678:= (PB7) & ( (SB9) ) & (!PB8);
TB89:= (PB8) & ( (!SB9) ) & (!PB9);
TB910:= (PB9) & ( (SB9) ) & (!PB10);
TB610:= (PB6) & ( (SB9) ) & (!PB10);
TL0:= (PL0) & ( (SL1) ) & (!PL1);
TLBR:= (PL0) & ( (MCL_error & MCLR_error) ) & (!PL1);
TLBR1:= (PLBR1) & ( (TLBR2_time) ) & (!PLBR2);
TLBR2:= (PLBR2) & ( (TLBR2_time) ) & (!PLBR1);
 
-- STABLE
stab:= !(RUN | HALT | TB01 | TBLR | TB12 | TB23 | TB2R | TB30 | TB34 | TB45 | TB56 | TB2RX | TBR10 | TBR12 | TBR23 | TBR34 | TB10R4 | CAM7_DET | CAM8_DET | TB67 | TB678 | TB89 | TB910 | TB610 | TL0 | TLBR | TLBR1 | TLBR2);
 
-- OUTPUTS
-- SET
BCB1_set:= PB0;
BCB10_set:= PB10;
BCB2_set:= PB2;
BCB3_set:= PB2;
BCB4_set:= PB2;
BCB5_set:= PB3;
BCB6_set:= PB3;
BCB7_set:= PB6;
BCB8_set:= PB6;
BCB9_set:= PB6 | PBR4;
BCBR1_set:= PBR1X;
BCBR2_set:= PBR1X;
BCBR3_set:= PBR1X;
BCBR4_set:= PBR1;
BCBR5_set:= PBR1;
BCBR6_set:= PBR1;
BCBR7_set:= PBR4;
BCBR8_set:= PBR4;
BCBR9_set:= FALSE;
BCL1_set:= PL0;
BCLB1_set:= PLBR1 | PLBR2;
BCLB10_set:= PLBR1 | PLBR2;
BCLB11_set:= PLBR1 | PLBR2;
BCLB2_set:= PLBR1 | PLBR2;
BCLB3_set:= PLBR1 | PLBR2;
BCLB4_set:= PLBR1 | PLBR2;
BCLB5_set:= PLBR1 | PLBR2;
BCLB6_set:= PLBR1 | PLBR2;
BCLB7_set:= PLBR1 | PLBR2;
BCLB8_set:= PLBR1 | PLBR2;
BCLB9_set:= PLBR1 | PLBR2;
CSB1_plus_set:= PB10;
EB1_set:= PB0;
EL1_set:= PL0;
MCB_set:= PB5;
MCBR_set:= PBR3;
MCB_start_set:= PB5 | PBR3;
MCB_stop_set:= FALSE;
PAS2Belt_minus_set:= FALSE;
PAS2Belt_plus_set:= PBR1X;
PAS2turn_set:= PBR1X;
PASLB1_plus_set:= PLBR1 | PLBR2;
PASLB1_turn_set:= PLBR1 | PLBR2;
PUWSB1_set:= PB2;
PUWSB1_left_set:= FALSE;
PUWSB1_plus_set:= PBLR1;
PUWSB1_right_set:= PBLR1;
PUWSL1_left_set:= PLBR1 | PLBR2;
PUWSL1_plus_set:= PLBR1 | PLBR2;
SBB1_set:= PB7;
-- RESET
BCB1_reset:= FALSE;
BCB10_reset:= FALSE;
BCB2_reset:= PBLR1;
BCB3_reset:= PBLR1;
BCB4_reset:= PBLR1;
BCB5_reset:= PBLR1 | PBR1X;
BCB6_reset:= PBLR1 | PBR1X;
BCB7_reset:= PBLR1;
BCB8_reset:= FALSE;
BCB9_reset:= FALSE;
BCBR1_reset:= PBLR1;
BCBR2_reset:= PBLR1;
BCBR3_reset:= PBLR1;
BCBR4_reset:= PBLR1;
BCBR5_reset:= PBLR1;
BCBR6_reset:= PBLR1;
BCBR7_reset:= PBLR1;
BCBR8_reset:= PBLR1;
BCBR9_reset:= PBLR1;
BCL1_reset:= FALSE;
BCLB1_reset:= FALSE;
BCLB10_reset:= FALSE;
BCLB11_reset:= FALSE;
BCLB2_reset:= FALSE;
BCLB3_reset:= FALSE;
BCLB4_reset:= FALSE;
BCLB5_reset:= FALSE;
BCLB6_reset:= FALSE;
BCLB7_reset:= FALSE;
BCLB8_reset:= FALSE;
BCLB9_reset:= FALSE;
CSB1_plus_reset:= FALSE;
EB1_reset:= PB1;
EL1_reset:= PL1;
MCB_reset:= FALSE;
MCBR_reset:= FALSE;
MCB_start_reset:= FALSE;
MCB_stop_reset:= PB3;
PAS2Belt_minus_reset:= PB3 | PBR1X;
PAS2Belt_plus_reset:= PB3;
PAS2turn_reset:= PB3;
PASLB1_plus_reset:= FALSE;
PASLB1_turn_reset:= FALSE;
PUWSB1_reset:= FALSE;
PUWSB1_left_reset:= PBLR1;
PUWSB1_plus_reset:= FALSE;
PUWSB1_right_reset:= PB2 | PLBR1 | PLBR2;
PUWSL1_left_reset:= FALSE;
PUWSL1_plus_reset:= FALSE;
SBB1_reset:= PB9;
-- OUTPUT
BCB1:= BCB1_set & !BCB1_reset;
BCB10:= BCB10_set & !BCB10_reset;
BCB2:= BCB2_set & !BCB2_reset;
BCB3:= BCB3_set & !BCB3_reset;
BCB4:= BCB4_set & !BCB4_reset;
BCB5:= BCB5_set & !BCB5_reset;
BCB6:= BCB6_set & !BCB6_reset;
BCB7:= BCB7_set & !BCB7_reset;
BCB8:= BCB8_set & !BCB8_reset;
BCB9:= BCB9_set & !BCB9_reset;
BCBR1:= BCBR1_set & !BCBR1_reset;
BCBR2:= BCBR2_set & !BCBR2_reset;
BCBR3:= BCBR3_set & !BCBR3_reset;
BCBR4:= BCBR4_set & !BCBR4_reset;
BCBR5:= BCBR5_set & !BCBR5_reset;
BCBR6:= BCBR6_set & !BCBR6_reset;
BCBR7:= BCBR7_set & !BCBR7_reset;
BCBR8:= BCBR8_set & !BCBR8_reset;
BCBR9:= BCBR9_set & !BCBR9_reset;
BCL1:= BCL1_set & !BCL1_reset;
BCLB1:= BCLB1_set & !BCLB1_reset;
BCLB10:= BCLB10_set & !BCLB10_reset;
BCLB11:= BCLB11_set & !BCLB11_reset;
BCLB2:= BCLB2_set & !BCLB2_reset;
BCLB3:= BCLB3_set & !BCLB3_reset;
BCLB4:= BCLB4_set & !BCLB4_reset;
BCLB5:= BCLB5_set & !BCLB5_reset;
BCLB6:= BCLB6_set & !BCLB6_reset;
BCLB7:= BCLB7_set & !BCLB7_reset;
BCLB8:= BCLB8_set & !BCLB8_reset;
BCLB9:= BCLB9_set & !BCLB9_reset;
CSB1_plus:= CSB1_plus_set & !CSB1_plus_reset;
EB1:= EB1_set & !EB1_reset;
EL1:= EL1_set & !EL1_reset;
MCB:= MCB_set & !MCB_reset;
MCBR:= MCBR_set & !MCBR_reset;
MCB_start:= MCB_start_set & !MCB_start_reset;
MCB_stop:= MCB_stop_set & !MCB_stop_reset;
PAS2Belt_minus:= PAS2Belt_minus_set & !PAS2Belt_minus_reset;
PAS2Belt_plus:= PAS2Belt_plus_set & !PAS2Belt_plus_reset;
PAS2turn:= PAS2turn_set & !PAS2turn_reset;
PASLB1_plus:= PASLB1_plus_set & !PASLB1_plus_reset;
PASLB1_turn:= PASLB1_turn_set & !PASLB1_turn_reset;
PUWSB1:= PUWSB1_set & !PUWSB1_reset;
PUWSB1_left:= PUWSB1_left_set & !PUWSB1_left_reset;
PUWSB1_plus:= PUWSB1_plus_set & !PUWSB1_plus_reset;
PUWSB1_right:= PUWSB1_right_set & !PUWSB1_right_reset;
PUWSL1_left:= PUWSL1_left_set & !PUWSL1_left_reset;
PUWSL1_plus:= PUWSL1_plus_set & !PUWSL1_plus_reset;
SBB1:= SBB1_set & !SBB1_reset;


--=====================================================================
--ASSIGNMENT
--=====================================================================

ASSIGN


-- INPUTS
init(START):= FALSE;
init(STOP):= FALSE;
init(SB1):= FALSE;
init(SB4):= FALSE;
init(SB5):= FALSE;
init(SB6):= FALSE;
init(SB9):= FALSE;
init(SBR2):= FALSE;
init(SBR3):= FALSE;
init(SBR4):= FALSE;
init(SBR5):= FALSE;
init(SB7B0):= FALSE;
init(SB7B1):= FALSE;
init(SB7B2):= FALSE;
init(SB7B3):= FALSE;
init(SB8B0):= FALSE;
init(SB8B1):= FALSE;
init(SB8B2):= FALSE;
init(SB8B3):= FALSE;
init(SP):= "0";
init(MCB_error):= FALSE;
init(MCBR_error):= FALSE;
init(CSB1W):= FALSE;
init(SL1):= FALSE;
init(MCL_error):= FALSE;
init(MCLR_error):= FALSE;
init(TB2RX_time):= FALSE;
init(TLBR2_time):= FALSE;
next(START):= case
   stab: {TRUE, FALSE};
   TRUE: START;
esac;
next(STOP):= case
   stab: {TRUE, FALSE};
   TRUE: STOP;
esac;
next(SB1):= case
   stab: {TRUE, FALSE};
   TRUE: SB1;
esac;
next(SB4):= case
   stab: {TRUE, FALSE};
   TRUE: SB4;
esac;
next(SB5):= case
   stab: {TRUE, FALSE};
   TRUE: SB5;
esac;
next(SB6):= case
   stab: {TRUE, FALSE};
   TRUE: SB6;
esac;
next(SB9):= case
   stab: {TRUE, FALSE};
   TRUE: SB9;
esac;
next(SBR2):= case
   stab: {TRUE, FALSE};
   TRUE: SBR2;
esac;
next(SBR3):= case
   stab: {TRUE, FALSE};
   TRUE: SBR3;
esac;
next(SBR4):= case
   stab: {TRUE, FALSE};
   TRUE: SBR4;
esac;
next(SBR5):= case
   stab: {TRUE, FALSE};
   TRUE: SBR5;
esac;
next(SB7B0):= case
   stab: {TRUE, FALSE};
   TRUE: SB7B0;
esac;
next(SB7B1):= case
   stab: {TRUE, FALSE};
   TRUE: SB7B1;
esac;
next(SB7B2):= case
   stab: {TRUE, FALSE};
   TRUE: SB7B2;
esac;
next(SB7B3):= case
   stab: {TRUE, FALSE};
   TRUE: SB7B3;
esac;
next(SB8B0):= case
   stab: {TRUE, FALSE};
   TRUE: SB8B0;
esac;
next(SB8B1):= case
   stab: {TRUE, FALSE};
   TRUE: SB8B1;
esac;
next(SB8B2):= case
   stab: {TRUE, FALSE};
   TRUE: SB8B2;
esac;
next(SB8B3):= case
   stab: {TRUE, FALSE};
   TRUE: SB8B3;
esac;
next(SP):= case
   stab: {"0", "1", "2"};
   TRUE: SP;
esac;
next(MCB_error):= case
   stab: {TRUE, FALSE};
   TRUE: MCB_error;
esac;
next(MCBR_error):= case
   stab: {TRUE, FALSE};
   TRUE: MCBR_error;
esac;
next(CSB1W):= case
   stab: {TRUE, FALSE};
   TRUE: CSB1W;
esac;
next(SL1):= case
   stab: {TRUE, FALSE};
   TRUE: SL1;
esac;
next(MCL_error):= case
   stab: {TRUE, FALSE};
   TRUE: MCL_error;
esac;
next(MCLR_error):= case
   stab: {TRUE, FALSE};
   TRUE: MCLR_error;
esac;
next(TB2RX_time):= case
   stab: {TRUE, FALSE};
   TRUE: TB2RX_time;
esac;
next(TLBR2_time):= case
   stab: {TRUE, FALSE};
   TRUE: TLBR2_time;
esac;
 
-- PLACES
init(IDLE):= TRUE;
init(PB0):= FALSE;
init(PB1):= FALSE;
init(PBLR1):= FALSE;
init(PB2):= FALSE;
init(PB3):= FALSE;
init(PB4):= FALSE;
init(PB5):= FALSE;
init(PB6):= FALSE;
init(PBR1X):= FALSE;
init(PBR1):= FALSE;
init(PBR2):= FALSE;
init(PBR3):= FALSE;
init(PBR4):= FALSE;
init(PB7):= FALSE;
init(PB8):= FALSE;
init(PB9):= FALSE;
init(PB10):= FALSE;
init(PL0):= FALSE;
init(PL1):= FALSE;
init(PLBR1):= FALSE;
init(PLBR2):= FALSE;
next(IDLE):= case
   RUN: FALSE;
   HALT: TRUE;
   TRUE: IDLE;
esac;
next(PB0):= case
   RUN: TRUE;
   TB01: FALSE;
   TB30: TRUE;
   TRUE: PB0;
esac;
next(PB1):= case
   TB01: TRUE;
   TBLR: FALSE;
   TB12: FALSE;
   TRUE: PB1;
esac;
next(PBLR1):= case
   TBLR: TRUE;
   TRUE: PBLR1;
esac;
next(PB2):= case
   TB12: TRUE;
   TB23: FALSE;
   TB2R: FALSE;
   TRUE: PB2;
esac;
next(PB3):= case
   TB23: TRUE;
   TB30: FALSE;
   TB34: FALSE;
   TRUE: PB3;
esac;
next(PB4):= case
   TB34: TRUE;
   TB45: FALSE;
   TRUE: PB4;
esac;
next(PB5):= case
   TB45: TRUE;
   TB56: FALSE;
   TRUE: PB5;
esac;
next(PB6):= case
   TB56: TRUE;
   TB67: FALSE;
   TB610: FALSE;
   TRUE: PB6;
esac;
next(PBR1X):= case
   TB2R: TRUE;
   TB2RX: FALSE;
   TRUE: PBR1X;
esac;
next(PBR1):= case
   TB2RX: TRUE;
   TBR10: FALSE;
   TBR12: FALSE;
   TRUE: PBR1;
esac;
next(PBR2):= case
   TBR12: TRUE;
   TBR23: FALSE;
   TRUE: PBR2;
esac;
next(PBR3):= case
   TBR10: TRUE;
   TBR23: TRUE;
   TBR34: FALSE;
   TRUE: PBR3;
esac;
next(PBR4):= case
   TBR34: TRUE;
   TB10R4: FALSE;
   TRUE: PBR4;
esac;
next(PB7):= case
   TB67: TRUE;
   TB678: FALSE;
   TRUE: PB7;
esac;
next(PB8):= case
   TB678: TRUE;
   TB89: FALSE;
   TRUE: PB8;
esac;
next(PB9):= case
   TB89: TRUE;
   TB910: FALSE;
   TRUE: PB9;
esac;
next(PB10):= case
   HALT: FALSE;
   TB10R4: TRUE;
   TB910: TRUE;
   TB610: TRUE;
   TRUE: PB10;
esac;
next(PL0):= case
   TL0: FALSE;
   TLBR: FALSE;
   TRUE: PL0;
esac;
next(PL1):= case
   TL0: TRUE;
   TLBR: TRUE;
   TRUE: PL1;
esac;
next(PLBR1):= case
   TLBR1: FALSE;
   TLBR2: TRUE;
   TRUE: PLBR1;
esac;
next(PLBR2):= case
   TLBR1: TRUE;
   TLBR2: FALSE;
   TRUE: PLBR2;
esac;




-- ====================================================================
-- SPECIFICATIONS
-- ====================================================================

--------------------------------------------------------------------
-- MCB GOOD
--------------------------------------------------------------------
DEFINE
cond1:= !MCB_error & stab & !IDLE; 

-- MCB produce base from raw material
SPEC
AG( AF(cond1 -> PB10) );

-- EB1 should emit when there are less than 2 raw materials at MCB feed
SPEC
AG( (cond1 & SB4) -> EB1 );

-- Belt Conveyors BCB2-BCB9 stay on after turning on the 1st time
SPEC
AG( cond1 & BCB2 -> AF(BCB2) );
SPEC
AG( cond1 & BCB3 -> AF(BCB3) );
SPEC
AG( cond1 & BCB4 -> AF(BCB4) );
SPEC
AG( cond1 & BCB5 -> AF(BCB5) );
SPEC
AG( cond1 & BCB6 -> AF(BCB6) );
SPEC
AG( cond1 & BCB7 -> AF(BCB7) );
SPEC
AG( cond1 & BCB8 -> AF(BCB8) );
SPEC
AG( cond1 & BCB9 -> AF(BCB9) );

-- PAS2 stays off if MCB does not have error
SPEC
AG( (cond1) -> ( !PAS2turn & !PAS2Belt_minus & !PAS2Belt_plus ) );

--------------------------------------------------------------------
-- MCB BAD AND MCBR GOOD
--------------------------------------------------------------------
DEFINE
cond2:= MCB_error & !MCBR_error & stab & !IDLE;

-- EB1 should emit when there are less than 2 raw materials at MCB feed
SPEC
AG( ( cond2 & SBR2) -> EB1 );

-- Belt Conveyors BCB2-BCB4 and BCB7-BCB9 stay on after turning on the 1st time
SPEC
AG( cond2 & BCB2 -> AF(BCB2) );
SPEC
AG( cond2 & BCB3 -> AF(BCB3) );
SPEC
AG( cond2 & BCB4 -> AF(BCB4) );
SPEC
AG( cond2 & BCB7 -> AF(BCB7) );
SPEC
AG( cond2 & BCB8 -> AF(BCB8) );
SPEC
AG( cond2 & BCB9 -> AF(BCB9) );

-- Pivot Arm Sorter 2 stays ON after initial startup
SPEC
AG( cond2 & PBR1X -> AF(PAS2turn & PAS2Belt_plus) );

-- Belt Conveyors BCBR1-BCBR8 stay on after turning on the 1st time
SPEC
AG( cond2 & BCBR1 -> AF(BCBR1) );
SPEC
AG( cond2 & BCBR2 -> AF(BCBR2) );
SPEC
AG( cond2 & BCBR3 -> AF(BCBR3) );
SPEC
AG( cond2 & BCBR4 -> AF(BCBR4) );
SPEC
AG( cond2 & BCBR5 -> AF(BCBR5) );
SPEC
AG( cond2 & BCBR6 -> AF(BCBR6) );
SPEC
AG( cond2 & BCBR7 -> AF(BCBR7) );
SPEC
AG( cond2 & BCBR8 -> AF(BCBR8) );


-- MCBR produce lid from raw material
SPEC
AG( AF(cond2 -> PB10) );

--------------------------------------------------------------------
-- MCL BAD AND MCLR BAD AND MCB GOOD AND MCBR GOOD
--------------------------------------------------------------------
DEFINE
cond3:= MCL_error & MCLR_error & !MCB_error & !MCBR_error & !IDLE; 

-- EB1 should emit when there are less than 2 raw materials at MCB feed
SPEC
AG( ( cond3 & SB4) -> EB1 );

-- EB1 should emit when there are less than 2 raw materials at MCBR feed
SPEC
AG( ( cond3 & SBR2) -> EB1 );

-- Pivot Arm Sorter 2 is Turned off
SPEC
AG( cond3 -> AF(!PAS2turn & !PAS2Belt_plus & !PAS2Belt_minus ) );

-- Belt Conveyors BCB2-BCB9 stay on after turning on the 1st time
SPEC
AG( cond3 & BCB2 -> AF(BCB2) );
SPEC
AG( cond3 & BCB3 -> AF(BCB3) );
SPEC
AG( cond3 & BCB4 -> AF(BCB4) );
SPEC
AG( cond3 & BCB5 -> AF(BCB5) );
SPEC
AG( cond3 & BCB6 -> AF(BCB6) );
SPEC
AG( cond3 & BCB7 -> AF(BCB7) );
SPEC
AG( cond3 & BCB8 -> AF(BCB8) );
SPEC
AG( cond3 & BCB9 -> AF(BCB9) );

-- Belt Conveyors BCBR1-BCBR3 are OFF
SPEC
AG( cond3 & BCBR1 -> AF(BCBR1) );
SPEC
AG( cond3 & BCBR2 -> AF(BCBR2) );
SPEC
AG( cond3 & BCBR3 -> AF(BCBR3) );

-- Pop Up Wheel Sorter L1 diverts raw materials to the left
SPEC
AG( cond3 & PLBR1 -> AF(PUWSB1_plus & PUWSB1_left) );

-- Belt Conveyors BCLB1-BCLB11 stay on after turning on the 1st time
SPEC
AG( cond3 & BCLB1 -> AF(BCLB1) );
SPEC
AG( cond3 & BCLB2 -> AF(BCLB2) );
SPEC
AG( cond3 & BCLB3 -> AF(BCLB3) );
SPEC
AG( cond3 & BCLB4 -> AF(BCLB4) );
SPEC
AG( cond3 & BCLB5 -> AF(BCLB5) );
SPEC
AG( cond3 & BCLB6 -> AF(BCLB6) );
SPEC
AG( cond3 & BCLB7 -> AF(BCLB7) );
SPEC
AG( cond3 & BCLB8 -> AF(BCLB8) );
SPEC
AG( cond3 & BCLB9 -> AF(BCLB9) );
SPEC
AG( cond3 & BCLB10 -> AF(BCLB10) );
SPEC
AG( cond3 & BCLB11 -> AF(BCLB11) );

-- Pivot Arm Sorter LB1 is Turned On
SPEC
AG( cond3 & PLBR1 -> AF(PASLB1_turn & PASLB1_plus ) );

-- Belt Conveyors BCBR4-BCBR8 stay on after turning on the 1st time
SPEC
AG( cond3 & BCBR4 -> AF(BCBR4) );
SPEC
AG( cond3 & BCBR5 -> AF(BCBR5) );
SPEC
AG( cond3 & BCBR6 -> AF(BCBR6) );
SPEC
AG( cond3 & BCBR7 -> AF(BCBR7) );
SPEC
AG( cond3 & BCBR8 -> AF(BCBR8) );

-- Stop Blade B1 is activated to prevent collision of items from MCB and MCBR

--------------------------------------------------------------------
-- MCB BAD AND MCBR BAD
--------------------------------------------------------------------
DEFINE
cond4:= MCB_error & MCBR_error & !IDLE;

SPEC
AG(cond4 & PBLR1 -> AF(PUWSB1_plus & PUWSB1_right));