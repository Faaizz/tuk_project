MODULE timer_1_TL1_mod
VAR
Q: boolean;
ASSIGN
init(Q):= {TRUE, FALSE};
next(Q):= {TRUE, FALSE};
MODULE timer_1_TB1_mod
VAR
Q: boolean;
ASSIGN
init(Q):= {TRUE, FALSE};
next(Q):= {TRUE, FALSE};
MODULE timer_1_P2_mod
VAR
Q: boolean;
ASSIGN
init(Q):= {TRUE, FALSE};
next(Q):= {TRUE, FALSE};
MODULE timer_1_P3_mod
VAR
Q: boolean;
ASSIGN
init(Q):= {TRUE, FALSE};
next(Q):= {TRUE, FALSE};

MODULE main

--=============================
--DECLARATION
--=============================

VAR


-- INPUTS
-- ['S_AL1', 'CS_AL1_W', 'S_AL1_BL', 'S_BIN_1', 'P_AL1_L_FT', 'P_AL1_L_BK', 'S_AL1_L', 'P_AL1_B_FT', 'P_AL1_B_BK', 'S_AL1_B']
S_AL1: boolean;
CS_AL1_W: {0, 100, 300, 500, 700, 900};
S_AL1_BL: boolean;
S_BIN_1: boolean;
P_AL1_L_FT: boolean;
P_AL1_L_BK: boolean;
S_AL1_L: boolean;
P_AL1_B_FT: boolean;
P_AL1_B_BK: boolean;
S_AL1_B: boolean;
 
-- PLACES
-- ['P0', 'P1', 'P2', 'P3', 'P4', 'PB', 'BIN1', 'BIN2', 'P5', 'P6', 'P_BASE', 'PB1', 'PUSH_B', 'PB2', 'PB23', 'PB3', 'P_LID', 'PL1', 'PUSH_L', 'PL2', 'PL23', 'PL3', 'initial']
P0: boolean;
P1: boolean;
P2: boolean;
P3: boolean;
P4: boolean;
PB: boolean;
BIN1: boolean;
BIN2: boolean;
P5: boolean;
P6: boolean;
P_BASE: boolean;
PB1: boolean;
PUSH_B: boolean;
PB2: boolean;
PB23: boolean;
PB3: boolean;
P_LID: boolean;
PL1: boolean;
PUSH_L: boolean;
PL2: boolean;
PL23: boolean;
PL3: boolean;


-- INTERNAL
timer_1_TL1: timer_1_TL1_mod;
timer_1_TB1: timer_1_TB1_mod;
timer_1_P2: timer_1_P2_mod;
timer_1_P3: timer_1_P3_mod;


--=============================
--DEFINITION
--=============================

DEFINE


-- TRANSITIONS
T0212:= (TRUE & P1) & ( (S_AL1) ) & (!P2);
T23:= (P2) & ( (timer_1_P2.Q) ) & (!P3);
T34:= (P3) & ( (timer_1_P3.Q) ) & (!P4);
T4B:= (P4) & ( ((CS_AL1_W < 200) | (CS_AL1_W > 400)) ) & (!PB);
T4B2:= (PB & BIN1) & ( (S_BIN_1) ) & (!BIN2 & !P1);
TB21:= (BIN2) & ( (!S_BIN_1) ) & (!BIN1);
T45:= (P4) & ( ((CS_AL1_W > 200) & (CS_AL1_W <= 300)) ) & (!P5);
T46:= (P4) & ( ((CS_AL1_W > 300) & (CS_AL1_W <= 400)) ) & (!P6);
T57:= (P5) & ( (S_AL1_BL) ) & (!P_LID & !P1);
T67:= (P6) & ( (S_AL1_BL) ) & (!P_BASE & !P1);
TB0:= (P_BASE) & ( (S_AL1_B) ) & (!PB1);
TB1:= (PB1 & PUSH_B) & ( (timer_1_TB1.Q) ) & (!PB2);
TB23:= (PB2) & ( (P_AL1_B_FT) ) & (!PB23);
TB2:= (PB23) & ( (P_AL1_B_FT) ) & (!PB3);
TB3:= (PB3) & ( (P_AL1_B_BK) ) & (!FALSE & !PUSH_B);
TL0:= (P_LID) & ( (S_AL1_L) ) & (!PL1);
TL1:= (PL1 & PUSH_L) & ( (timer_1_TL1.Q) ) & (!PL2);
TL23:= (PL2) & ( (P_AL1_L_FT) ) & (!PL23);
TL2:= (PL23) & ( (P_AL1_L_FT) ) & (!PL3);
TL3:= (PL3) & ( (P_AL1_L_BK) ) & (!FALSE & !PUSH_L);
 
-- STABLE
stab:= !(T0212 | T23 | T34 | T4B | T4B2 | TB21 | T45 | T46 | T57 | T67 | TB0 | TB1 | TB23 | TB2 | TB3 | TL0 | TL1 | TL23 | TL2 | TL3);
 
-- OUTPUTS
-- SET
AL1_BASE_set:= P6;
AL1_LID_set:= P5;
CS_AL1_PLUS_set:= P1 | P2 | PB | P5 | P6;
PUWS_AL1_1_PLUS_set:= PB | P5 | P6;
PUWS_AL1_1_RT_set:= P5 | P6;
P_AL1_B_set:= PB2 | PB23;
P_AL1_L_set:= PL2 | PL23;
SB_AL1_set:= P3 | P4 | PB | P5 | P6;
-- RESET
AL1_BASE_reset:= P1 | P5;
AL1_LID_reset:= P1 | P6;
CS_AL1_PLUS_reset:= P3 | P4;
PUWS_AL1_1_PLUS_reset:= P1 | P2 | P3 | P4;
PUWS_AL1_1_RT_reset:= P1 | P2 | P3 | P4 | PB;
P_AL1_B_reset:= P_BASE | PB1 | PB3;
P_AL1_L_reset:= P_LID | PL1 | PL3;
SB_AL1_reset:= P1 | P2;
-- OUTPUT
AL1_BASE:= AL1_BASE_set & !AL1_BASE_reset;
AL1_LID:= AL1_LID_set & !AL1_LID_reset;
CS_AL1_PLUS:= CS_AL1_PLUS_set & !CS_AL1_PLUS_reset;
PUWS_AL1_1_PLUS:= PUWS_AL1_1_PLUS_set & !PUWS_AL1_1_PLUS_reset;
PUWS_AL1_1_RT:= PUWS_AL1_1_RT_set & !PUWS_AL1_1_RT_reset;
P_AL1_B:= P_AL1_B_set & !P_AL1_B_reset;
P_AL1_L:= P_AL1_L_set & !P_AL1_L_reset;
SB_AL1:= SB_AL1_set & !SB_AL1_reset;
-- Non-Boolean Outputs


--=============================
--ASSIGNMENT
--=============================

ASSIGN


-- INPUTS
init(S_AL1):= {TRUE, FALSE};
init(CS_AL1_W):= 0;
init(S_AL1_BL):= {TRUE, FALSE};
init(S_BIN_1):= {TRUE, FALSE};
init(P_AL1_L_FT):= {TRUE, FALSE};
init(P_AL1_L_BK):= {TRUE, FALSE};
init(S_AL1_L):= {TRUE, FALSE};
init(P_AL1_B_FT):= {TRUE, FALSE};
init(P_AL1_B_BK):= {TRUE, FALSE};
init(S_AL1_B):= {TRUE, FALSE};
next(S_AL1):= case
   stab: {TRUE, FALSE};
   TRUE: S_AL1;
esac;
next(CS_AL1_W):= case
   stab: {0, 100, 300, 500, 700, 900};
   TRUE: CS_AL1_W;
esac;
next(S_AL1_BL):= case
   stab: {TRUE, FALSE};
   TRUE: S_AL1_BL;
esac;
next(S_BIN_1):= case
   stab: {TRUE, FALSE};
   TRUE: S_BIN_1;
esac;
next(P_AL1_L_FT):= case
   stab: {TRUE, FALSE};
   TRUE: P_AL1_L_FT;
esac;
next(P_AL1_L_BK):= case
   stab: {TRUE, FALSE};
   TRUE: P_AL1_L_BK;
esac;
next(S_AL1_L):= case
   stab: {TRUE, FALSE};
   TRUE: S_AL1_L;
esac;
next(P_AL1_B_FT):= case
   stab: {TRUE, FALSE};
   TRUE: P_AL1_B_FT;
esac;
next(P_AL1_B_BK):= case
   stab: {TRUE, FALSE};
   TRUE: P_AL1_B_BK;
esac;
next(S_AL1_B):= case
   stab: {TRUE, FALSE};
   TRUE: S_AL1_B;
esac;
 
-- PLACES
init(P0):= TRUE;
init(P1):= TRUE;
init(P2):= FALSE;
init(P3):= FALSE;
init(P4):= FALSE;
init(PB):= FALSE;
init(BIN1):= TRUE;
init(BIN2):= FALSE;
init(P5):= FALSE;
init(P6):= FALSE;
init(P_BASE):= FALSE;
init(PB1):= FALSE;
init(PUSH_B):= TRUE;
init(PB2):= FALSE;
init(PB23):= FALSE;
init(PB3):= FALSE;
init(P_LID):= FALSE;
init(PL1):= FALSE;
init(PUSH_L):= TRUE;
init(PL2):= FALSE;
init(PL23):= FALSE;
init(PL3):= FALSE;
next(P0):= case
   TRUE: P0;
esac;
next(P1):= case
   T0212: FALSE;
   T4B2: TRUE;
   T57: TRUE;
   T67: TRUE;
   TRUE: P1;
esac;
next(P2):= case
   T0212: TRUE;
   T23: FALSE;
   TRUE: P2;
esac;
next(P3):= case
   T23: TRUE;
   T34: FALSE;
   TRUE: P3;
esac;
next(P4):= case
   T34: TRUE;
   T4B: FALSE;
   T45: FALSE;
   T46: FALSE;
   TRUE: P4;
esac;
next(PB):= case
   T4B: TRUE;
   T4B2: FALSE;
   TRUE: PB;
esac;
next(BIN1):= case
   T4B2: FALSE;
   TB21: TRUE;
   TRUE: BIN1;
esac;
next(BIN2):= case
   T4B2: TRUE;
   TB21: FALSE;
   TRUE: BIN2;
esac;
next(P5):= case
   T45: TRUE;
   T57: FALSE;
   TRUE: P5;
esac;
next(P6):= case
   T46: TRUE;
   T67: FALSE;
   TRUE: P6;
esac;
next(P_BASE):= case
   T67: TRUE;
   TB0: FALSE;
   TRUE: P_BASE;
esac;
next(PB1):= case
   TB0: TRUE;
   TB1: FALSE;
   TRUE: PB1;
esac;
next(PUSH_B):= case
   TB1: FALSE;
   TB3: TRUE;
   TRUE: PUSH_B;
esac;
next(PB2):= case
   TB1: TRUE;
   TB23: FALSE;
   TRUE: PB2;
esac;
next(PB23):= case
   TB23: TRUE;
   TB2: FALSE;
   TRUE: PB23;
esac;
next(PB3):= case
   TB2: TRUE;
   TB3: FALSE;
   TRUE: PB3;
esac;
next(P_LID):= case
   T57: TRUE;
   TL0: FALSE;
   TRUE: P_LID;
esac;
next(PL1):= case
   TL0: TRUE;
   TL1: FALSE;
   TRUE: PL1;
esac;
next(PUSH_L):= case
   TL1: FALSE;
   TL3: TRUE;
   TRUE: PUSH_L;
esac;
next(PL2):= case
   TL1: TRUE;
   TL23: FALSE;
   TRUE: PL2;
esac;
next(PL23):= case
   TL23: TRUE;
   TL2: FALSE;
   TRUE: PL23;
esac;
next(PL3):= case
   TL2: TRUE;
   TL3: FALSE;
   TRUE: PL3;
esac;


--=============================
--SPECIFICATIONS
--=============================

--CHECK LIVENESS
SPEC
AG(EF(T0212));
SPEC
AG(EF(T23));
SPEC
AG(EF(T34));
SPEC
AG(EF(T4B));
SPEC
AG(EF(T4B2));
SPEC
AG(EF(TB21));
SPEC
AG(EF(T45));
SPEC
AG(EF(T46));
SPEC
AG(EF(T57));
SPEC
AG(EF(T67));
SPEC
AG(EF(TB0));
SPEC
AG(EF(TB1));
SPEC
AG(EF(TB23));
SPEC
AG(EF(TB2));
SPEC
AG(EF(TB3));
SPEC
AG(EF(TL0));
SPEC
AG(EF(TL1));
SPEC
AG(EF(TL23));
SPEC
AG(EF(TL2));
SPEC
AG(EF(TL3));
--CHECK DEADLOCKS
SPEC
AG(EF( T0212 | T23 | T34 | T4B | T4B2 | TB21 | T45 | T46 | T57 | T67 | TB0 | TB1 | TB23 | TB2 | TB3 | TL0 | TL1 | TL23 | TL2 | TL3 ));
--CHECK DEAD TRANSITIONS
SPEC
EF(T0212);
SPEC
EF(T23);
SPEC
EF(T34);
SPEC
EF(T4B);
SPEC
EF(T4B2);
SPEC
EF(TB21);
SPEC
EF(T45);
SPEC
EF(T46);
SPEC
EF(T57);
SPEC
EF(T67);
SPEC
EF(TB0);
SPEC
EF(TB1);
SPEC
EF(TB23);
SPEC
EF(TB2);
SPEC
EF(TB3);
SPEC
EF(TL0);
SPEC
EF(TL1);
SPEC
EF(TL23);
SPEC
EF(TL2);
SPEC
EF(TL3);
--CHECK UNSTABLE CYCLES
SPEC
AG(EF(stab));
--CHECK CONTRADICTORY OUTPUTS
SPEC
AG( stab -> ! (SB_AL1_set & SB_AL1_reset) );
SPEC
AG( stab -> ! (PUWS_AL1_1_PLUS_set & PUWS_AL1_1_PLUS_reset) );
SPEC
AG( stab -> ! (PUWS_AL1_1_RT_set & PUWS_AL1_1_RT_reset) );
SPEC
AG( stab -> ! (CS_AL1_PLUS_set & CS_AL1_PLUS_reset) );
SPEC
AG( stab -> ! (P_AL1_B_set & P_AL1_B_reset) );
SPEC
AG( stab -> ! (P_AL1_L_set & P_AL1_L_reset) );
--CHECK EMPTY OUTPUTS
SPEC
AG( stab -> SB_AL1_set | SB_AL1_reset );
SPEC
AG( stab -> PUWS_AL1_1_PLUS_set | PUWS_AL1_1_PLUS_reset );
SPEC
AG( stab -> PUWS_AL1_1_RT_set | PUWS_AL1_1_RT_reset );
SPEC
AG( stab -> CS_AL1_PLUS_set | CS_AL1_PLUS_reset );
SPEC
AG( stab -> P_AL1_B_set | P_AL1_B_reset );
SPEC
AG( stab -> P_AL1_L_set | P_AL1_L_reset );
SPEC
AG(stab) -> EF(P2);
SPEC
AG(stab & P2 & (CS_AL1_W > 100)) -> AX(SB_AL1);
SPEC
AG(stab & (CS_AL1_W <= 400) & (CS_AL1_W > 800)) -> AX(!PUWS_AL1_1_RT);
SPEC
AG(stab & (CS_AL1_W > 400) & (CS_AL1_W <= 800)) -> AX(PUWS_AL1_1_RT);
SPEC
AG(stab & P4 & (CS_AL1_W > 200) & (CS_AL1_W <= 300)) -> A[(AL1_LID & !AL1_BASE) U P4];
SPEC
AG(stab & P4 & (CS_AL1_W > 300) & (CS_AL1_W <= 400)) -> A[(AL1_BASE & !AL1_LID) U P4];
SPEC
AG(stab & P_LID) -> EX(P_AL1_L);
SPEC
AG(stab & P_BASE) -> EX(P_AL1_B);
