
MODULE main

--=====================================================================
--DECLARATION
--=====================================================================

VAR


-- INPUTS
-- ['S_AL1_P_B1', 'S_AL1_P_B2', 'S_AL1_MCB', 'S_AL1_MCBR', 'S_AL1_P_B3']
S_AL1_P_B1: boolean;
S_AL1_P_B2: boolean;
S_AL1_MCB: boolean;
S_AL1_MCBR: boolean;
S_AL1_P_B3: boolean;
 
-- PLACES
-- ['PPAL1', 'PP0', 'PP1', 'PP2', 'PP3', 'PP7', 'PPL3', 'PPL7', 'initial']
PPAL1: boolean;
PP0: boolean;
PP1: boolean;
PP2: boolean;
PP3: boolean;
PP7: boolean;
PPL3: boolean;
PPL7: boolean;


--=====================================================================
--DEFINITION
--=====================================================================

DEFINE


-- TRANSITIONS
TP0:= (PP0) & ( (!MCB_CONTROL) ) & (!PP1);
TP1:= (PP1) & ( (S_AL1_P_B1) ) & (!PP2);
TP2:= (PP2) & ( (S_AL1_P_B2 & !MCB_CONTROL) ) & (!PP3);
TP3:= (PP3) & ( (S_AL1_MCB) ) & (!PP7 & !PP1);
TP7:= (PP7) & ( (S_AL1_P_B3) ) & (!FALSE);
TPL2:= (PP2) & ( (S_AL1_P_B2 & MCB_CONTROL) ) & (!PPL3);
TPL3:= (PPL3) & ( (S_AL1_MCBR) ) & (!PPL7 & !PP1);
TPL7:= (PPL7) & ( (S_AL1_P_B3) ) & (!FALSE);
 
-- STABLE
stab:= !(TP0 | TP1 | TP2 | TP3 | TP7 | TPL2 | TPL3 | TPL7);
 
-- OUTPUTS
-- SET
E_AL1_B1_set:= PP0 | PP1;
MCB_CONTROL_set:= PP3;
PAS_AL1_PLUS_set:= PPL3;
PAS_AL1_TURN_set:= PPL3;
PUWS_AL1_B1_PLUS_set:= PPAL1 | PP2;
PUWS_AL1_B1_RIGHT_set:= FALSE;
-- RESET
E_AL1_B1_reset:= PP2 | PP3 | PPL3;
MCB_CONTROL_reset:= PP0 | PPL3;
PAS_AL1_PLUS_reset:= PP0 | PP1 | PP2 | PP3;
PAS_AL1_TURN_reset:= PP0 | PP1 | PP2 | PP3;
PUWS_AL1_B1_PLUS_reset:= FALSE;
PUWS_AL1_B1_RIGHT_reset:= PPAL1 | PP2;
-- OUTPUT
E_AL1_B1:= E_AL1_B1_set & !E_AL1_B1_reset;
MCB_CONTROL:= MCB_CONTROL_set & !MCB_CONTROL_reset;
PAS_AL1_PLUS:= PAS_AL1_PLUS_set & !PAS_AL1_PLUS_reset;
PAS_AL1_TURN:= PAS_AL1_TURN_set & !PAS_AL1_TURN_reset;
PUWS_AL1_B1_PLUS:= PUWS_AL1_B1_PLUS_set & !PUWS_AL1_B1_PLUS_reset;
PUWS_AL1_B1_RIGHT:= PUWS_AL1_B1_RIGHT_set & !PUWS_AL1_B1_RIGHT_reset;
-- Non-Boolean Outputs


--=====================================================================
--ASSIGNMENT
--=====================================================================

ASSIGN


-- INPUTS
init(S_AL1_P_B1):= {TRUE, FALSE};
init(S_AL1_P_B2):= {TRUE, FALSE};
init(S_AL1_MCB):= {TRUE, FALSE};
init(S_AL1_MCBR):= {TRUE, FALSE};
init(S_AL1_P_B3):= {TRUE, FALSE};
next(S_AL1_P_B1):= case
   stab: {TRUE, FALSE};
   TRUE: S_AL1_P_B1;
esac;
next(S_AL1_P_B2):= case
   stab: {TRUE, FALSE};
   TRUE: S_AL1_P_B2;
esac;
next(S_AL1_MCB):= case
   stab: {TRUE, FALSE};
   TRUE: S_AL1_MCB;
esac;
next(S_AL1_MCBR):= case
   stab: {TRUE, FALSE};
   TRUE: S_AL1_MCBR;
esac;
next(S_AL1_P_B3):= case
   stab: {TRUE, FALSE};
   TRUE: S_AL1_P_B3;
esac;
 
-- PLACES
init(PPAL1):= TRUE;
init(PP0):= TRUE;
init(PP1):= FALSE;
init(PP2):= FALSE;
init(PP3):= FALSE;
init(PP7):= FALSE;
init(PPL3):= FALSE;
init(PPL7):= FALSE;
next(PPAL1):= case
   TRUE: PPAL1;
esac;
next(PP0):= case
   TP0: FALSE;
   TRUE: PP0;
esac;
next(PP1):= case
   TP0: TRUE;
   TP1: FALSE;
   TP3: TRUE;
   TPL3: TRUE;
   TRUE: PP1;
esac;
next(PP2):= case
   TP1: TRUE;
   TP2: FALSE;
   TPL2: FALSE;
   TRUE: PP2;
esac;
next(PP3):= case
   TP2: TRUE;
   TP3: FALSE;
   TRUE: PP3;
esac;
next(PP7):= case
   TP3: TRUE;
   TP7: FALSE;
   TRUE: PP7;
esac;
next(PPL3):= case
   TPL2: TRUE;
   TPL3: FALSE;
   TRUE: PPL3;
esac;
next(PPL7):= case
   TPL3: TRUE;
   TPL7: FALSE;
   TRUE: PPL7;
esac;


--=====================================================================
--SPECIFICATIONS
--=====================================================================

--CHECK LIVENESS
SPEC
AG(EF(TP0));
SPEC
AG(EF(TP1));
SPEC
AG(EF(TP2));
SPEC
AG(EF(TP3));
SPEC
AG(EF(TP7));
SPEC
AG(EF(TPL2));
SPEC
AG(EF(TPL3));
SPEC
AG(EF(TPL7));
--CHECK DEADLOCKS
SPEC
AG(EF( TP0 | TP1 | TP2 | TP3 | TP7 | TPL2 | TPL3 | TPL7 ));
--CHECK DEAD TRANSITIONS
SPEC
EF(TP0);
SPEC
EF(TP1);
SPEC
EF(TP2);
SPEC
EF(TP3);
SPEC
EF(TP7);
SPEC
EF(TPL2);
SPEC
EF(TPL3);
SPEC
EF(TPL7);
--CHECK UNSTABLE CYCLES
SPEC
AG(EF(stab));
--CHECK CONTRADICTORY OUTPUTS
SPEC
AG( stab -> ! (E_AL1_B1_set & E_AL1_B1_reset) );
SPEC
AG( stab -> ! (PUWS_AL1_B1_PLUS_set & PUWS_AL1_B1_PLUS_reset) );
SPEC
AG( stab -> ! (PUWS_AL1_B1_RIGHT_set & PUWS_AL1_B1_RIGHT_reset) );
SPEC
AG( stab -> ! (PAS_AL1_PLUS_set & PAS_AL1_PLUS_reset) );
SPEC
AG( stab -> ! (PAS_AL1_TURN_set & PAS_AL1_TURN_reset) );
--CHECK EMPTY OUTPUTS
SPEC
AG( stab -> E_AL1_B1_set | E_AL1_B1_reset );
SPEC
AG( stab -> PUWS_AL1_B1_PLUS_set | PUWS_AL1_B1_PLUS_reset );
SPEC
AG( stab -> PUWS_AL1_B1_RIGHT_set | PUWS_AL1_B1_RIGHT_reset );
SPEC
AG( stab -> PAS_AL1_PLUS_set | PAS_AL1_PLUS_reset );
SPEC
AG( stab -> PAS_AL1_TURN_set | PAS_AL1_TURN_reset );
SPEC
AG(stab -> AF(PUWS_AL1_B1_PLUS & !PUWS_AL1_B1_RIGHT));
SPEC
AG( (PP0 & stab) -> EF(PPL7) );
SPEC
AG( (PP0 & stab) -> EF(PP7) );
